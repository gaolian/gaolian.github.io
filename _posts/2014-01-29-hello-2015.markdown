---
layout:     post
title:      "Welcome to GaoLian's Blog"
subtitle:   " \"Hello World, Hello Blog\""
date:       2018-08-28 13:00:00
author:     "GaoLian"
header-img: "img/post-bg-2015.jpg"
tags:
    - 杂谈
---

> “OK, let's begin! ”


## 前言

什么时候开始想要开通个人博客的呢？老实说在大学的四年与研究生的两年间都没想过要做这件事。不过在某些时候，当头脑里充满了各种有趣但是奇怪的构想的时候，我想过如果能把这些构想都实现了，然后找个地方把效果都演示出来，这应该是一件很酷的事。而实际上，这次计划开通这个博客的契机，则是求职。
我理想的岗位有两种，一种是计算机视觉，这是一种非常酷并且强大的技术，我想用自己的努力来促进他的进步，见证他成为真正革命性的交互技术并推动社会变革。一种是开发电子游戏，这是一个很有趣且奇妙的领域，我想用新的技术拓宽他的边界，让人们看到不同的可能性并且享受其中。我认为自己是一个理想主义的人，热情是我做事最重要的驱动，他予我打破局面的灵感、帮我在困境中坚持下去，所以我希望将他延续到我人生的下一个时期。

## 增强现实与电子游戏

我一直有一种感觉，熟悉的东西或许都有他的另一面。

大一的时候曾在一个学校的科技展出中看过一个很酷的东西，他们在展台上放了一台电视，电视上显示了一个放在黑色幕布前的雕塑模型，有趣的地方在于，在不同的角度观察屏幕看到的是雕塑的不同侧面（也即是从该角度观察一个实体雕塑应该看到的侧面），这样我在移步观察的过程中会感觉这个屏幕里的雕塑，好像真实存在于我们的世界中一样。

我觉得这很有趣，其中原理是在于利用电视机顶上的Kinect传感器得知人头部位置并计算出观察角度，然后将三维模型沿着该角度投影并显示在屏幕上就好了。所以核心点不在于显示雕塑的电视机、不在于屏幕上显示的雕塑模型，而在于确定头部具体位置的定位技术。想到这里我很兴奋，如果把这种效果进行拓展：显示设备不一定得是固定的，可以是便携的或者是可穿戴的；模型也不一定得是静态的，可以是动画的、可交互的；这样对定位技术的要求就更高了，我们不仅需要知道观察者的三维位置，还必须知道他的三维角度，而且当显示设备并不固定的时候，我们是不是仍需要额外的固定在某个位置的Kinect传感器来定位？假如仍然可以把定位装置集成在便携的显示设备上那当然就很方便了，有这样的方法吗？

答案是肯定的，这就是基于计算机视觉的增强现实技术。

我已经打算要开始做了，要做一个什么样的应用呢？这些增强现实技术都是基于摄像头的，目前只有智能手机才会集成屏幕且恰好有后置摄像头。做一个移动端App吧！那做什么类型的呢？如果开发一个增强现实的App，那它应该比传统的App有更多优点。但其实增强现实也是有缺点的，用户需要特意去开启摄像头，以及设置或者拍摄用于识别与定位的“标识图”，这种“标识图”的实体版本如果目前没有的话，则需要打印或者用大屏幕显示出来，这其实真的很麻烦...这些其实是所有增强现实App所必须面对的，但是既然决定去做了，最好的就是做一个很棒的App让人觉着这些麻烦都“不是事儿”。所以我一定使得增强现实技术的优点最大化地传达。增强现实的优点在于两个方面：从输入的角度，增强现实基于视觉定位技术，能提供一个直观、方便的体感交互界面，能实时、高效地输入复杂的空间运动信息。另外从输出的角度，增强现实将虚拟的三维形象渲染在真实的环境中，这很奇妙。老实说，即使有这两方面的优点我也不能保证增强现实应用能明显优于传统应用，除了在一种领域--电子游戏。

实用型App往往以二维界面呈现其功能，游戏可能是最频繁、最需要涉及三维空间的移动应用，目前的三维移动游戏依靠两个轮盘来分别控制移动与视角，效率低且交互感差。增强现实实现的体感输入可以带来很好的改进。另一方面，增强现实渲染让用户可以在熟悉的真实空间里与虚拟的敌人战斗，这是一种全新而奇妙的体验。以个人的游戏经验来说，第一人称射击游戏是最能突出代入感的形式，这种代入感可以很好地呼应增强现实技术的特点。所以最终我决定开发一个基于增强现实技术的移动端第一人称设计游戏。

演示视频请看[BLOODAY DEMO](https://v.youku.com/v_show/id_XMzc2Njk1NTc5Mg==.html)，因为时间所限，这是一个比较早期的版本，且缺少背景音与声音效果，请见谅。


<p id = "build"></p>
---

## 正文

接下来说说搭建这个博客的技术细节。  

正好之前就有关注过 [GitHub Pages](https://pages.github.com/) + [Jekyll](http://jekyllrb.com/) 快速 Building Blog 的技术方案，非常轻松时尚。

其优点非常明显：

* **Markdown** 带来的优雅写作体验
* 非常熟悉的 Git workflow ，**Git Commit 即 Blog Post**
* 利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机
	* 如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了
* Jekyll 的自定制非常容易，基本就是个模版引擎


本来觉得最大的缺点可能是 GitHub 在国内访问起来太慢，所以第二天一起床就到 GitCafe(Chinese GitHub Copy) 迁移了一个[镜像](http://huxpro.gitcafe.io)出来，结果还是巨慢。

哥哥可是个前端好嘛！ 果断开 Chrome DevTool 查了下网络请求，原来是 **pending 在了 Google Fonts** 上，页面渲染一直被阻塞到请求超时为止，难怪这么慢。  
忍痛割爱，只好把 Web Fonts 去了（反正超时看到的也只能是 fallback ），果然一下就正常了，而且 GitHub 和 GitCafe 对比并没有感受到明显的速度差异，虽然 github 的 ping 值明显要高一些，达到了 300ms，于是用 DNSPOD 优化了一下速度。



---

配置的过程中也没遇到什么坑，基本就是 Git 的流程，相当顺手

大的 Jekyll 主题上直接 fork 了 Clean Blog（这个主题也相当有名，就不多赘述了。唯一的缺点大概就是没有标签支持，于是我给它补上了。）

本地调试环境需要 `gem install jekyll`，结果 rubygem 的源居然被墙了……后来手动改成了我大淘宝的镜像源才成功

Theme 的 CSS 是基于 Bootstrap 定制的，看得不爽的地方直接在 Less 里改就好了（平时更习惯 SCSS 些），**不过其实我一直觉得 Bootstrap 在移动端的体验做得相当一般，比我在淘宝参与的团队 CSS 框架差多了……**所以为了体验，也补了不少 CSS 进去

最后就进入了耗时反而最长的**做图、写字**阶段，也算是进入了**写博客**的正轨，因为是类似 Hack Day 的方式去搭这个站的，所以折腾折腾着大半夜就过去了。

第二天考虑中文字体的渲染，fork 了 [Type is Beautiful](http://www.typeisbeautiful.com/) 的 `font` CSS，调整了字号，适配了 Win 的渣渲染，中英文混排效果好多了。


## 后记

回顾这个博客的诞生，纯粹是出于个人兴趣。在知乎相关问题上回答并获得一定的 star 后，我决定把这个博客主题当作一个小小的开源项目来维护。

在经历 v1.0 - v1.5 的蜕变后，这个博客主题愈发完整，不但增加了诸多 UI 层的优化（opinionated）；在代码层面，更加丰富的配置项也使得这个主题拥有了更好的灵活性与可拓展性。而作为一个开源项目，我也积极的为其完善文档与解决 issue。

如果你恰好逛到了这里，希望你也能喜欢这个博客主题。

—— Hux 后记于 2015.10
